// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_service_interfaces.go -source=interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "demo/bank-linking-listener/internal/service/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateAdminAccount mocks base method.
func (m *MockUserService) CreateAdminAccount(ctx context.Context, user entity.User) entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminAccount", ctx, user)
	ret0, _ := ret[0].(entity.Error)
	return ret0
}

// CreateAdminAccount indicates an expected call of CreateAdminAccount.
func (mr *MockUserServiceMockRecorder) CreateAdminAccount(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminAccount", reflect.TypeOf((*MockUserService)(nil).CreateAdminAccount), ctx, user)
}

// CreateCustomerAccount mocks base method.
func (m *MockUserService) CreateCustomerAccount(ctx context.Context, user entity.User) entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerAccount", ctx, user)
	ret0, _ := ret[0].(entity.Error)
	return ret0
}

// CreateCustomerAccount indicates an expected call of CreateCustomerAccount.
func (mr *MockUserServiceMockRecorder) CreateCustomerAccount(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerAccount", reflect.TypeOf((*MockUserService)(nil).CreateCustomerAccount), ctx, user)
}

// CreateUserAccount mocks base method.
func (m *MockUserService) CreateUserAccount(ctx context.Context, user entity.User) entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, user)
	ret0, _ := ret[0].(entity.Error)
	return ret0
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockUserServiceMockRecorder) CreateUserAccount(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockUserService)(nil).CreateUserAccount), ctx, user)
}

// GetByEmail mocks base method.
func (m *MockUserService) GetByEmail(ctx context.Context, email string) (entity.User, entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(entity.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServiceMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserService)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUserService) GetByID(ctx context.Context, id uint) (entity.User, entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(entity.Error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserService)(nil).GetByID), ctx, id)
}

// SignIn mocks base method.
func (m *MockUserService) SignIn(ctx context.Context, user entity.User) (string, entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.Error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceMockRecorder) SignIn(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserService)(nil).SignIn), ctx, user)
}

// MockBankService is a mock of BankService interface.
type MockBankService struct {
	ctrl     *gomock.Controller
	recorder *MockBankServiceMockRecorder
}

// MockBankServiceMockRecorder is the mock recorder for MockBankService.
type MockBankServiceMockRecorder struct {
	mock *MockBankService
}

// NewMockBankService creates a new mock instance.
func NewMockBankService(ctrl *gomock.Controller) *MockBankService {
	mock := &MockBankService{ctrl: ctrl}
	mock.recorder = &MockBankServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankService) EXPECT() *MockBankServiceMockRecorder {
	return m.recorder
}

// CreateBank mocks base method.
func (m *MockBankService) CreateBank(ctx context.Context, bank entity.Bank) (entity.Bank, entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBank", ctx, bank)
	ret0, _ := ret[0].(entity.Bank)
	ret1, _ := ret[1].(entity.Error)
	return ret0, ret1
}

// CreateBank indicates an expected call of CreateBank.
func (mr *MockBankServiceMockRecorder) CreateBank(ctx, bank any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBank", reflect.TypeOf((*MockBankService)(nil).CreateBank), ctx, bank)
}

// GetBankListByUserID mocks base method.
func (m *MockBankService) GetBankListByUserID(ctx context.Context, userID uint) ([]entity.Bank, entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankListByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Bank)
	ret1, _ := ret[1].(entity.Error)
	return ret0, ret1
}

// GetBankListByUserID indicates an expected call of GetBankListByUserID.
func (mr *MockBankServiceMockRecorder) GetBankListByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankListByUserID", reflect.TypeOf((*MockBankService)(nil).GetBankListByUserID), ctx, userID)
}

// LinkBank mocks base method.
func (m *MockBankService) LinkBank(ctx context.Context, userID uint, bankCode string) entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkBank", ctx, userID, bankCode)
	ret0, _ := ret[0].(entity.Error)
	return ret0
}

// LinkBank indicates an expected call of LinkBank.
func (mr *MockBankServiceMockRecorder) LinkBank(ctx, userID, bankCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkBank", reflect.TypeOf((*MockBankService)(nil).LinkBank), ctx, userID, bankCode)
}
