// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"demo/bank-linking-listener/config"
	"demo/bank-linking-listener/internal/delivery/consumer"
	"demo/bank-linking-listener/internal/delivery/http"
	"demo/bank-linking-listener/internal/infrastructure/tidb"
	"demo/bank-linking-listener/internal/repository/tidb_repo"
	"demo/bank-linking-listener/internal/server"
	"demo/bank-linking-listener/internal/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeHTTPServer(configFilePath string) server.Server {
	configConfig := config.LoadConfig(configFilePath)
	tiDB := tidb.NewTiDB(configConfig)
	userRepository := tidb_repo.NewUserRepository(tiDB)
	userService := service.NewUserService(userRepository)
	bankRepository := tidb_repo.NewBankRepository(tiDB)
	bankService := service.NewBankService(bankRepository)
	controller := http.NewController(configConfig, userService, bankService)
	serverServer := server.NewHTTPServer(configConfig, controller, userService)
	return serverServer
}

func InitializeConsumerJob(configFilePath string) server.Server {
	configConfig := config.LoadConfig(configFilePath)
	tiDB := tidb.NewTiDB(configConfig)
	bankRepository := tidb_repo.NewBankRepository(tiDB)
	bankService := service.NewBankService(bankRepository)
	controller := consumer.NewController(configConfig, bankService)
	serverServer := server.NewConsumerJob(configConfig, controller)
	return serverServer
}

// wire.go:

var (
	configSet = wire.NewSet(config.LoadConfig)

	infrastructureSet = wire.NewSet(tidb.NewTiDB)

	repositorySet = wire.NewSet(tidb_repo.NewUserRepository, tidb_repo.NewBankRepository)

	serviceSet = wire.NewSet(service.NewUserService, service.NewBankService)

	controllerSet = wire.NewSet(http.NewController, consumer.NewController)

	httpServerSet = wire.NewSet(server.NewHTTPServer)

	consumerJobSet = wire.NewSet(server.NewConsumerJob)
)
